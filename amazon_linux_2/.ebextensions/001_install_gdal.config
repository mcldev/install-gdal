# --------------------------------------------------------------
# This package relies on an accessible S3 bucket "INSTALL_BUCKET_NAME" containing:
# geos-${INSTALL_GEOS_VER}.tar.gz
# proj-${INSTALL_PROJ_VER}.tar.gz
# gdal-${INSTALL_GDAL_VER}.tar.gz
# GDAL-${INSTALL_GDAL_VER}-cp38-cp38-linux_x86_64.whl
# --------------------------------------------------------------

packages:
  yum:
    libtiff: []
    numpy: []

files:
  "/etc/ld.so.conf.d/gdal_path.conf":
    mode: "000755"
    content: |
      /usr/local/geos/lib
      /usr/local/proj/lib
      /usr/local/gdal/lib

commands:
  # Amazon Linux 2 ver 3.3.4 has a broken version of SQLite3, fixes: "undefined symbol: sqlite3_column_table_name"
  00_fix_sqlite:
    command: yum reinstall sqlite -y

  01_install_geos:
    command: |
      echo "Downloading geos-${INSTALL_GEOS_VER} from S3"
      sudo aws s3 cp s3://${INSTALL_BUCKET_NAME}/gdal/geos-${INSTALL_GEOS_VER}.tar.gz /tmp/geos-${INSTALL_GEOS_VER}.tar.gz --quiet
      echo "Unzipping to /usr/local/geos"
      sudo mkdir -p /usr/local/geos
      sudo tar -xf /tmp/geos-${INSTALL_GEOS_VER}.tar.gz -C /usr/local/geos
      echo "Removing old zip"
      sudo rm -f /tmp/geos-${INSTALL_GEOS_VER}.tar.gz
    ignoreErrors: false
    env:
      INSTALL_BUCKET_NAME:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_BUCKET_NAME
      INSTALL_GEOS_VER:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_GEOS_VER

  02_install_proj:
    command: |
      echo "Downloading proj-${INSTALL_PROJ_VER} from S3"
      sudo aws s3 cp s3://${INSTALL_BUCKET_NAME}/gdal/proj-${INSTALL_PROJ_VER}.tar.gz /tmp/proj-${INSTALL_PROJ_VER}.tar.gz --quiet
      echo "Unzipping to /usr/local/proj"
      sudo mkdir -p /usr/local/proj
      sudo tar -xf /tmp/proj-${INSTALL_PROJ_VER}.tar.gz -C /usr/local/proj
      echo "Removing old zip"
      sudo rm -f /tmp/proj-${INSTALL_PROJ_VER}.tar.gz
    ignoreErrors: false
    env:
      INSTALL_BUCKET_NAME:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_BUCKET_NAME
      INSTALL_PROJ_VER:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_PROJ_VER

  03_install_gdal:
    command: |
      echo "Downloading gdal-${INSTALL_GDAL_VER} from S3"
      sudo aws s3 cp s3://${INSTALL_BUCKET_NAME}/gdal/gdal-${INSTALL_GDAL_VER}.tar.gz /tmp/gdal-${INSTALL_GDAL_VER}.tar.gz --quiet
      echo "Unzipping to /usr/local/gdal"
      sudo mkdir -p /usr/local/gdal
      sudo tar -xf /tmp/gdal-${INSTALL_GDAL_VER}.tar.gz -C /usr/local/gdal
      echo "Removing old zip"
      sudo rm -f /tmp/gdal-${INSTALL_GDAL_VER}.tar.gz
    ignoreErrors: false
    env:
      INSTALL_BUCKET_NAME:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_BUCKET_NAME
      INSTALL_GDAL_VER:
        "Fn::GetOptionSetting":
          Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: INSTALL_GDAL_VER

  04_refresh_shared_libraries:
    command: ldconfig
    ignoreErrors: false

  05_check_core_gdal:
    command: |
      echo "GDAL Version Check"
      export PATH=/usr/local/gdal/bin:$PATH
      gdalinfo --version
      echo "GDAL_LIBRARY_PATH: ${GDAL_LIBRARY_PATH}"
      echo "PATH: ${PATH}"
      echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
    ignoreErrors: false

container_commands:
  01_check_core_gdal:
    command: |
      echo "GDAL Version Check"
      gdalinfo --version
      echo "GDAL_LIBRARY_PATH: ${GDAL_LIBRARY_PATH}"
      echo "PATH: ${PATH}"
      echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
    ignoreErrors: false

  # This fixes the error: no module named _gdal_array - installs precompiled gdal
  #  OR uninstall, then install numpy and reinstall
  02_reinstall_gdal:
    command: |
      echo "Downloading GDAL wheel"
      aws s3 cp s3://${INSTALL_BUCKET_NAME}/gdal/GDAL-${INSTALL_GDAL_VER}-cp38-cp38-linux_x86_64.whl /tmp/GDAL-${INSTALL_GDAL_VER}-cp38-cp38-linux_x86_64.whl --quiet
      echo "Installing Precompiled Python GDAL"
      source ${PYTHONPATH}/activate && ${PYTHONPATH}/pip install /tmp/GDAL-${INSTALL_GDAL_VER}-cp38-cp38-linux_x86_64.whl --force-reinstall
      echo "Removing old wheel"
      rm -f /tmp/GDAL-${INSTALL_GDAL_VER}-cp38-cp38-linux_x86_64.whl
    ignoreErrors: false

  03_check_python_gdal:
    command: |
      echo "Checking Python GDAL"
      source ${PYTHONPATH}/activate && ${PYTHONPATH}/python -c 'import osgeo.gdal; print(osgeo.gdal.__version__); print(osgeo.gdal.__file__)'
    ignoreErrors: false


option_settings:
  aws:elasticbeanstalk:application:environment:
    PATH: /usr/local/gdal/bin:$PATH
    GDAL_LIBRARY_PATH: /usr/local/gdal/lib/libgdal.so
    PROJ_LIB: /usr/local/proj/share/proj
    GDAL_DATA: /usr/local/gdal/share/gdal
#    LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH
